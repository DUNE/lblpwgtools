#include "services.fcl"

#include "CalHit.fcl"
#include "Slicer4D.fcl"

#include "CosmicExposureInfo.fcl"

#include "CosmicTrack.fcl"
#include "CosmicVeto.fcl"

#include "KalmanTrack.fcl"
#include "KalmanTrackMerge.fcl"

#include "MultiHoughT.fcl"
#include "ElasticArmsHS.fcl"
#include "FuzzyKVertex.fcl"

#include "MichelEFilter.fcl"
#include "SliceMEF.fcl"

#include "BackTracker.fcl"
#include "Metadata.fcl"

#include "CalHitAna.fcl"
#include "SlicerAna.fcl"

#include "KalmanTrackAna.fcl"

#include "HoughValidate.fcl"
#include "ElasticArmsValidate.fcl"
#include "FuzzyKValidate.fcl"

process_name: BatchRecoCosmicsValid

services:
{
  TFileService: { fileName: "recocosmicsprodvalid_hist.root" closeFileFast: false}
  scheduler:    { wantTracer: true wantSummary: true }
  message:      { debugModules: ["*"] destinations: { debugmsg:{type: "cout" threshold: "WARNING"} } }
  @table::standard_services
}
services.BackTracker: @local::standard_backtracker

source:
{
  module_type: RootInput
  maxEvents:   -1
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "recocosmicsprodvalid.root"
    fastCloning: false
  }
}

physics:
{
  producers:
  {
    #responsibility indicated in comments after each module
    exposure:             @local::standard_cosmicexposureinfo  #calib
    calhit:               @local::standard_calhit              #calib
    slicer:               @local::standard_slicer4d            #reco
    cosmictrack:          @local::standard_cosmictrack         #reco
    veto:                 @local::standard_cosmicveto          #prod
    kalmantrack:          @local::standard_kalmantrack         #reco
    kalmantrackmerge:     @local::standard_kalmantrackmerge    #reco
    multihough:           @local::standard_multihough          #reco
    elasticarmshs:        @local::standard_elasticarmshs       #reco
    fuzzykvertex:         @local::standard_fuzzykvertex        #reco
    slicemef:             @local::standard_slicemef            #reco
  }
  
  analyzers:
  {
    calhitana:          @local::standard_calhitana           #reco
    slicerana:          @local::standard_slicerana           #reco
    cosmictrackana:     @local::standard_cosmictrackana      #reco
    micheleana:         @local::standard_micheleana          #reco
    kalmantrackana:     @local::standard_kalmantrackana      #reco - Kalman tracker using kalman-style ana
    ktfuzzyana:         @local::standard_fuzzykvalidate      #reco - Kalman tracker using fuzzyk-style ana
    multihoughana:      @local::standard_houghvalidate       #reco
    elasticarmsana:     @local::standard_elasticarmsvalidate #reco
    fuzzykana:          @local::standard_fuzzykvalidate      #reco
    
    metadata:           @local::standard_metadata            #prod
  }

  filters:
  {
    michelecosmictrack:   @local::passall_michelecosmic        #calib
    michelekalmantrack:   @local::passall_michelekalman        #calib
  }
    
  reco: [ exposure, calhit, slicer, cosmictrack, veto, kalmantrack,
          kalmantrackmerge, multihough, elasticarmshs,fuzzykvertex,
          michelecosmictrack, michelekalmantrack, slicemef ]

  ana:  [ calhitana, slicerana, cosmictrackana, micheleana, kalmantrackana,
          ktfuzzyana, multihoughana, elasticarmsana, fuzzykana ]
  
  stream1:       [ out1, metadata ]
  trigger_paths: [ reco ]
  end_paths:     [ ana, stream1 ]
}

physics.analyzers.metadata.params.Reconstructed.base_release: ""       #automatically picked up at run time
physics.analyzers.metadata.params.NOVA.Standard: "true"
physics.analyzers.ktfuzzyana.VertexLabel: "kalmantrackmerge"
physics.analyzers.ktfuzzyana.TrackLabel:  "kalmantrackmerge"

physics.producers.kalmantrack.ObeyPreselection: true
physics.producers.kalmantrackmerge.ObeyPreselection: true
physics.producers.multihough.ObeyPreselection: true
physics.producers.elasticarmshs.ObeyPreselection: true
physics.producers.fuzzykvertex.ObeyPreselection: true
