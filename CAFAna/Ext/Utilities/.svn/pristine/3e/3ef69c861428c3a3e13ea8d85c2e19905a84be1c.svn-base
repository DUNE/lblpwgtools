#!/usr/bin/env python

# Bread & Butter
import sys
import warnings
import argparse

# special filter on MacOS X
if sys.platform == 'darwin':
   warnings.filterwarnings(action='ignore', category=RuntimeWarning, module='ROOT',\
			         message='no dictionary for class \S* is available$')

warnings.filterwarnings(action='ignore', category=FutureWarning)

# Math & Data
import pandas as pd

# For interacting with CAF (ROOT) and HDF5 (h5py) files.
import ROOT as root
import h5py

# Argument parsing
parser = argparse.ArgumentParser(description='A validation script for comparing HDF5 files to CAFs')
parser.add_argument(action="store", dest="filenameHDF", help='path to a HDF5 file')
parser.add_argument(action="store", dest="filenameCAF", help='path to a CAF file')
parser.add_argument('--variable', action='store', dest='var', help='Examine a single variable')
parser.add_argument('--diffs', action='store_true', dest='show_diffs', help='Only show entries where HDF and CAF differ')
parser.add_argument('--hdf-nans', action='store_true', dest='show_hdf_nans', help='Only show entries where HDF sizes are NaN')
parser.add_argument('--caf-nans', action='store_true', dest='show_caf_nans', help='Only show entries where CAF sizes are NaN')
parser.add_argument('--nans', action='store_true', dest='show_all_nans', help='Only show entries where HDF or CAF sizes are NaN')
args = parser.parse_args()


# /////////////////////////////////////////////////////////////////////////////
def WalkHdf5Structure(file):
    structure = []
    groups = list(file.keys())
    for key in groups:
        group = file.get(key)
        for dataset in list(group.keys()):
            if '_idx' not in dataset:
                dset = group.get(dataset)
                if dataset == 'value':
                    structure.append([format(key), int(dset.shape[0])])
                else:
                    structure.append(['{}.{}'.format(key, dataset), int(dset.shape[0])])
                    
    return structure


# /////////////////////////////////////////////////////////////////////////////
def WalkRootStructure(obj, prefix=None, level='', pBranch=None, structure=[]):
    if obj.Class_Name() == 'TTree':
        for branch in list(obj.GetListOfBranches()):
            WalkRootStructure(branch, prefix=prefix, level=level, pBranch=pBranch, structure=structure)
    
    if obj.Class_Name() == 'TBranchElement':
        level = obj.GetName() if prefix == None else '{}.{}'.format(prefix, obj.GetName())
        if len(obj.GetListOfBranches()) == 0 and len(obj.GetBrowsables()) == 0:
            structure.append([level, '', obj.GetEntries()])
        
        for branch in list(obj.GetListOfBranches()):
            WalkRootStructure(branch, prefix=prefix, level=level, pBranch=obj, structure=structure)

        for browsable in list(obj.GetBrowsables()):
            WalkRootStructure(browsable, prefix=prefix, level=level, pBranch=obj, structure=structure)
        
        
    if obj.Class_Name() == 'TNonSplitBrowsable':
        if obj.GetName() == '@size': return
        
        if len(obj.GetLeaves()) == 0:
            structure.append(['{}.{}'.format(level, obj.GetName()), obj.GetTitle(), pBranch.GetEntries()])

        for leaf in obj.GetLeaves():
            WalkRootStructure(leaf, prefix=prefix, level='{}.{}'.format(level, obj.GetName()), pBranch=pBranch, structure=structure)
            
    return structure


# /////////////////////////////////////////////////////////////////////////////
def main():
    # Open the files
    fHDFFile = h5py.File(args.filenameHDF, 'r')
    fCAFFile = root.TFile.Open(args.filenameCAF, 'read')


    # Parse CAF structure
    cafTrees = []
    for key in list(fCAFFile.GetListOfKeys()):
        if key.GetClassName() != 'TTree':
            continue
        name = key.GetName()
        if name not in [tree['name'] for tree in cafTrees]:
            br = fCAFFile.FindObjectAny(name).GetListOfBranches()[0].GetName()
            cafTrees.append({'name': name, 'branch': br})
    CAF_STRUCTURE = []
    for tree in cafTrees:
        CAF_STRUCTURE = WalkRootStructure(fCAFFile.FindObjectAny(tree['name']), prefix=tree['branch'], structure=CAF_STRUCTURE)
    CAF_STRUCTURE.sort()
    caf_df = pd.DataFrame(CAF_STRUCTURE, columns=['VARIABLE', 'DESC', 'N_CAF'])


    # Parse HDF structure
    HDF_STRUCTURE = WalkHdf5Structure(fHDFFile)
    HDF_STRUCTURE.sort()
    hdf_df = pd.DataFrame(HDF_STRUCTURE, columns=['VARIABLE', 'N_HDF'])


    # Merge CAF & HDF dataframes, and calculate differences between them
    mrg_df = pd.merge(caf_df, hdf_df, on='VARIABLE', how='left')
    mrg_df['N_DIFF'] = mrg_df['N_CAF'] - mrg_df['N_HDF']

    # Show results to user
    if (args.var != None):
        out_df = mrg_df[mrg_df['VARIABLE'].str.contains(args.var)]
    else:
        out_df = mrg_df

    # Slice up the data
    kDIF_NONZERO = (out_df['N_DIFF'] != 0)             # Difference between CAF & HDF is > 0
    kHDF_NONZERO = (out_df['N_HDF'] != 0)              # HDF variables which are > 0
    kDIF_HDF_NONZERO = kDIF_NONZERO & kHDF_NONZERO     # Where difference AND HDF variables are non-zero

    kCAF_NAN = (out_df['N_CAF'].isnull())              # Where CAF entries are NaN
    kHDF_NAN = (out_df['N_HDF'].isnull())              # Where HDF entries are NaN
    kANY_NAN = kCAF_NAN | kHDF_NAN                     # Where CAF or HDF entries are NaN

    if (args.show_diffs):
        print(out_df[kDIF_NONZERO])
    elif (args.show_hdf_nans):
        print(out_df[kHDF_NAN])
    elif (args.show_caf_nans):
        print(out_df[kCAF_NAN])
    elif (args.show_all_nans):
        print(out_df[kANY_NAN])
    else:
        print(out_df)

if __name__ == '__main__':
    main()
